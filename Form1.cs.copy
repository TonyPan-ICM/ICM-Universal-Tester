/*
	Add/Remove/Edit currentBoard board placement order
	Support ADC value verification
	Support multiple out on the same fixture
	Support wifi MAC programming and web registration / verification

1.       
you add “BarcodeScan” to your UTF Windows Software, the option would be the same as  “Simulate Inputs”.
on this command the RPI will perform barcode trigger, decode the serial #, ect…
 
<Step ID="0001">
    <CommandCodeName>SI</CommandCodeName>
    <_Command>BarcodeScan</_Command>
    <BoardId>4</BoardId>
    <_Board>RelayBoard</_Board>
    <_BoardAddr>4</_BoardAddr>
    <Probe ID="01">
      <Name>Flame Sim Enable</Name>
      <BoardId>4</BoardId>
      <ChannelId>1</ChannelId>
      <Value>0</Value>
    </Probe>
  </Step>
 
2.       
change “Repeat Start” to accept 0 as an option. When set to 0, the RPI will prompt the user to enter the number of repeats
 
3.            
Added  UartRead script command, passing values are integer representing constants strings withing the RASPI CODE
This command reads the uart until some matching string is found
 
<Step ID="0005">
    <CommandCodeName>SI</CommandCodeName>
    <_Command>UartRead</_Command>
    <BoardId>6</BoardId>
    <_Board>Serial Programmer</_Board>
    <_BoardAddr>6</_BoardAddr>
    <_Const>1</_Const>
    <TestStepNote>reading uart</TestStepNote>
  </Step>
 
4. added UartSearch script command, passing values are integer representing constants string within
This command searches the uart buffer for some matching string
 
<Step ID="0006">
    <CommandCodeName>SI</CommandCodeName>
    <_Command>UartSearch</_Command>
    <BoardId>6</BoardId>
    <_Board>Serial Programmer</_Board>
    <_BoardAddr>6</_BoardAddr>    
<FirmwareFile>1</FirmwareFile>
    <_FirmwareFile>1</_FirmwareFile>
    <TestStepNote>search lct</TestStepNote>
  </Step>
 
5. added WaitForImageInstr script command, the passing values are integer representing an index within the Image Folder,
This command loads an image that has instructions for the user to perform
 
<Step ID="0030">
    <CommandCodeName>WFUIII</CommandCodeName>
    <_Command>WaitForImageInstr</_Command>
                                <_CH1>1</_CH1>
    <TestStepNote>Image Instr 1</TestStepNote>
  </Step>
 

 * 
 * 
 * 
 */


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;


using System.Xml;
using System.Xml.Linq;
using System.IO;
using System.Xml.Xsl;
 

using System.Data.SqlClient;

using System.Drawing.Drawing2D;
using System.Collections;
using System.Drawing.Imaging;
using System.IO.IsolatedStorage;

using System.Reflection;     // to use Missing.Value

using System.Threading;
using System.Diagnostics;
using Microsoft.Office.Interop.Excel;

namespace ICM_Universal_Tester
{
	public partial class Form1 : Form
	{
		public Form1()
		{
			InitializeComponent();

			string stringPathFiles = GetParentFolder(System.Windows.Forms.Application.StartupPath, 0) + constStringFolderFiles;

			stringNewTestFile = stringPathFiles + constStringNewTestFile;
			stringTesterConfigFile = stringPathFiles + constStringTesterConfigFile;
			stringModulesFile = stringPathFiles + constStringModulesFile;

			if (stringModulesFile.Length > 0 && File.Exists(stringModulesFile))
			{
				modulesXmlDoc = XDocument.Load(stringModulesFile);	// load it
			}
			else
			{
				modulesXmlDoc = null;
			}
			if (modulesXmlDoc == null)
			{
				MessageBox.Show("Error: Module file not Found.");
			}
			/*
			if (stringTesterConfigFile.Length > 0 && File.Exists(stringTesterConfigFile))
			{
				testerConfigXmlDoc = XDocument.Load(stringTesterConfigFile);	// load it
			}
			else
			{
				testerConfigXmlDoc = null;
			}
			if (testerConfigXmlDoc == null)
			{
				MessageBox.Show("Error: Test config file not Found.");
			}
			 * */
			string cmdAlias = "";
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_SimulateInputs); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_VerifyOutputs); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_WaitOutputs); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_Wait); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_WaitUser); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_WaitImage); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_ReadUart); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_SearchUart); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_RepeatEnd); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_RepeatStart); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			//cmdAlias = SearchCommandAliasByCodeName(stringCommand_Barcode); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_BarcodeScan); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_FlashRenesas); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_FlashMicrochip); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_FlashCypress); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_FlashInventek); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_EraseRenesas); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			cmdAlias = SearchCommandAliasByCodeName(stringCommand_EraseCypress); if (cmdAlias.Length > 0) comboBoxTestType.Items.Add(cmdAlias);
			
			/*
			for (int i = 1; ; i++)
			{
				XElement currentBoard = SearchModuleByPosition(i.ToString());
				if (currentBoard != null)
				{
					string name = GetBoardName(currentBoard.Element(stringModuleAlias).Value, i.ToString());
					comboBoxBoard.Items.Add(name);
				}
				else
				{
					break;
				}
			}
			 * */
		}

		const string stringModule = "Module";		// attributes
		const string stringModuleCodeName = "ModuleCodeName";	// element
		const string stringModuleAlias = "ModuleAlias";	// element
		const string stringModuleTotalChannelsIn = "TotalChannelsIn";	// element
		const string stringModuleTotalChannelsOut = "TotalChannelsOut";	// element
		const string stringSpecialFlameBoardAdditionalChannels = "SpecialFlameBoardAdditionalChannels";	// element
		const string stringSpecialPowerBoardAdditionalChannels = "SpecialPowerBoardAdditionalChannels";	// element
		const string stringIoDirection = "IoDirection";	// element
		const string stringApplicableCommand = "ApplicableCommand";	// atribute
		const string stringPin = "Pin";	// atribute
		const string stringPinAlias = "PinAlias";
		const string stringReferencePin = "ReferencePin";

		const string stringCommandCodeName = "CommandCodeName";	// element
		const string stringCommandAlias = "CommandAlias";	// element

		const string stringCommand_SimulateInputs = "SI";
		const string stringCommand_BarcodeScan = "BS";
		const string stringCommand_VerifyOutputs = "VO";
		const string stringCommand_WaitOutputs = "WO";
		const string stringCommand_Wait = "W";
		const string stringCommand_WaitImage = "WFII";
		const string stringCommand_WaitUser = "WFUI";		
		//const string stringCommand_Barcode = "B";
		const string stringCommand_FlashRenesas = "FR";
		const string stringCommand_FlashMicrochip = "FM";
		const string stringCommand_FlashCypress = "FC";
		const string stringCommand_FlashInventek = "FI";
		const string stringCommand_EraseRenesas = "ER";
		const string stringCommand_EraseCypress = "EC";
		const string stringCommand_ReadUart = "RUART";
		const string stringCommand_SearchUart = "SUART";
		const string stringCommand_RepeatStart = "RPT_START";
		const string stringCommand_RepeatEnd = "RPT_END";

		const string stringIoDirection_Input = "I";
		const string stringIoDirection_Output = "O";

		string stringBoardOnTester = "BoardOnTester";	// attribute
		
		private XElement SearchBoardByPosition(string position)
		{
			if (testXmlDoc != null)
			{
				if (position.Length > 0)
				{
					var info = from element in testXmlDoc.Descendants(stringBoardOnTester)
							   where ((string)element.Element(stringBoardIndexOnTester) == position)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}

		private XElement SearchModuleByID(string id)
		{
			if (modulesXmlDoc != null)
			{
				if (id.Length > 0)
				{
					var info = from element in modulesXmlDoc.Descendants(stringModule)
							   where ((string)element.Element(stringModuleCodeName) == id)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}

		private XElement SearchModuleByPosition(string position)
		{
			if (testXmlDoc != null)
			{
				if (position.Length > 0)
				{
					XElement board = SearchBoardByPosition(position);
					if (board != null)
					{
						string id = (string)board.Element(stringModuleCodeName);
						if (id != null && id.Length > 0)
						{
							return SearchModuleByID(id);
						}
					}
				}
			}
			return null;
		}

		private XElement SearchForProbeElement(string alias, string board, string pin)
		{
			foreach (XElement obj in testXmlDoc.Descendants(stringConnection))
			{
				string ioName = (string)obj.Element(stringConnectionAlias);
				string ioBoard = (string)obj.Element(stringBoardIndexOnTester);
				string ioPinNumber = (string)obj.Element(stringPinNumberOnBoard);
				if (ioName != null && (alias.Length == 0 || ioName == alias) &&
					ioBoard != null && (board.Length == 0 || ioBoard == board) &&
					ioPinNumber != null && (pin.Length == 0 || ioPinNumber == pin))
				{
					return obj;
				}
			}
			return null;
		}

		private XElement SearchModuleByProbeName(string objName)
		{
			foreach (XElement obj in testXmlDoc.Descendants(stringConnection))
			{
				string ioName = (string)obj.Element(stringConnectionAlias);
				string ioBoard = (string)obj.Element(stringBoardIndexOnTester);
				if (ioName != null && ioName == objName &&
					ioBoard != null && ioBoard.Length > 0)
				{
					XElement board = SearchBoardByPosition(ioBoard);
					if (board != null)
					{
						string ioModuleId = (string)board.Element(stringModuleCodeName);
						if (ioModuleId != null && ioModuleId.Length > 0)
						{
							XElement module = SearchModuleById(ioModuleId);
							return module;
						}
					}
				}
			}
			return null;
		}

		private XElement SearchModuleById(string id)
		{
			if (modulesXmlDoc != null)
			{
				if (id.Length > 0)
				{
					var info = from element in modulesXmlDoc.Descendants(stringModule)
							   where ((string)element.Element(stringModuleCodeName) == id)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}

		private string SearchCommandAliasByCodeName(string commandCodeName)
		{
			XElement e = SearchCommandByCodeName(commandCodeName);
			if (e != null) return e.Element(stringCommandAlias).Value;
			return "";
		}
		
		private string SearchParameterAliasByCodeName(string commandCodeName, string parameterCodeName, string parameterField)
		{
			XElement e = SearchParameterByCodeName(commandCodeName, parameterCodeName);
			if (e != null) return e.Element(parameterField).Value;
			return "";
		}

		private XElement SearchParameterByCodeName(string commandCodeName, string parameterId)
		{
			if (modulesXmlDoc != null)
			{
				if (parameterId.Length > 0)
				{
					XElement command = SearchCommandByCodeName(commandCodeName);
					var info = from element in command.Descendants(stringParameter)
							   where ((string)element.Element(stringParameterCodeName) == parameterId)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}

		const string stringParameter = "Parameter";	// attribute
		const string stringParameterCodeName = "ParameterCodeName";	// element
		const string stringParameterAlias = "ParameterAlias";	// element
		const string stringParameterValueMin = "ValueMin";	// element
		const string stringParameterValueMax = "ValueMax";	// element

		private string SearchCommandCodeNameByAlias(string probeName, string commandAlias)
		{
			XElement e = SearchCommandByAlias(probeName,commandAlias);
			if (e != null) return e.Element(stringCommandCodeName).Value;
			return "";
		}

		private XElement SearchCommandByAlias(string probeName, string commandAlias)
		{
			if (modulesXmlDoc != null && commandAlias.Length > 0)
			{
				if (probeName.Length > 0)
				{
					XElement pin = SearchPinByProbeName(probeName);
					if (pin != null)
					{
						foreach (XElement cmd in pin.Descendants(stringApplicableCommand))
						{
							string commandId = (string)cmd.Element(stringCommandCodeName);
							if (commandId != null && commandId.Length > 0)
							{
								XElement command = SearchCommandByCodeName(commandId);
								if (command != null)
								{
									string commandName = (string)command.Element(stringCommandAlias);
									if (commandName != null && commandName == commandAlias)
									{
										return command;
									}
								}
							}
						}
					}
				}
				else
				{
					var info = from element in modulesXmlDoc.Descendants(stringCommand)
							   where ((string)element.Element(stringCommandAlias) == commandAlias)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}
		
		private XElement SearchCommandByCodeName(string commandCodeName)
		{
			if (modulesXmlDoc != null)
			{
				if (commandCodeName.Length > 0)
				{
					var info = from element in modulesXmlDoc.Descendants(stringCommand)
							   where ((string)element.Element(stringCommandCodeName) == commandCodeName)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}

		private XElement SearchPinById(string modulePosition, string pinNumber)
		{
			if (modulesXmlDoc != null)
			{
				if (pinNumber.Length > 0)
				{
					XElement module = SearchModuleByPosition(modulePosition);
					var info = from element in module.Descendants(stringPin)
							   where ((string)element.Attribute(stringId) == pinNumber)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}

		private XElement SearchPinByProbeName(string probeName)
		{
			if (modulesXmlDoc != null)
			{
				foreach (XElement obj in testXmlDoc.Descendants(stringConnection))
				{
					string ioName = (string)obj.Element(stringConnectionAlias);
					string pinNumber = (string)obj.Element(stringPinNumberOnBoard);
					if (ioName != null && ioName == probeName && pinNumber != null && pinNumber.Length > 0)
					{
						XElement module = SearchModuleByProbeName(probeName);
						var info = from element in module.Descendants(stringPin)
								   where ((string)element.Attribute(stringId) == pinNumber)
								   select element;
						if (info.Count() > 0) return (XElement)info.Distinct().First();
					}
				}
			}
			return null;
		}

		private void ShowTesterConnections(string boardIndex, string channelIndex)
		{
			TreeNode toBeSelectedNode = null;// new TreeNode();
			treeViewBoards.Nodes.Clear();
			excelReportBoards.Clear();
			treeViewConnections.Nodes.Clear();
			excelReportConnections.Clear();
			if (testXmlDoc != null)
			{
				for (int i = 1; ; i++)
				{
					string position = i.ToString();
					XElement module = SearchModuleByPosition(position);
					if (module != null)
					{
						string name = module.Element(stringModuleAlias).Value;
						if (name != null && name.Length > 0)
						{
							string str = GetBoardName(name, position);
							TreeNode node = treeViewConnections.Nodes.Add(str);
							excelReportConnections.Add(str);
							node.Tag = position;
							TreeNode node1 = treeViewBoards.Nodes.Add(str);
							node1.Tag = position;
							excelReportBoards.Add(str);
							int j = 0;
							foreach (XElement pin in module.Descendants(stringPin))
							{
								string pinAlias = (string)pin.Element(stringPinAlias);
								string ioDirection = (string)pin.Element(stringIoDirection).Value;
								j++;
								str = "P." + j.ToString() + "   ";
								if (ioDirection == "-") str += "-" + pinAlias + "-";
								else str += pinAlias;
								TreeNode n = node.Nodes.Add(str);
								TreeNode n1 = node1.Nodes.Add(str);
								XElement probe = SearchForProbeElement("", position, j.ToString());
								n.Tag = j.ToString();
								string ioName = "";
								if (probe != null)
								{
									ioName = (string)probe.Element(stringConnectionAlias);
									if (ioName == null) ioName = "";
								}
								if (ioName.Length > 0)
								{
									switch (ioDirection)
									{
										case stringIoDirection_Input:	// inpout
											ioName = "  <---------------  " + ioName;
											break;
										case stringIoDirection_Output:	// output
											ioName = "  --------------->  " + ioName;
											break;
										default:
											ioName = "  <--------------->  " + ioName;
											break;
									}
								}
								n.Text += ioName;
								excelReportConnections.Add("\t" + n.Text);
								excelReportBoards.Add("\t" + n1.Text);
								if (position == boardIndex && j.ToString() == channelIndex)
								{
									toBeSelectedNode = n;
								}
							}
							node.Expand();
						}
					}
					else
					{
						break;
					}
				}
			}
			treeViewConnections.SelectedNode = toBeSelectedNode;
		}

		private void buttonAddAbove_Click(object sender, EventArgs e)
		{
			InsertTestStep(false);
		}

		private void InsertTestStep(bool AtBelow)
		{
			if (listViewTestSteps.Items.Count == 0)
			{
				AddTestStep(1);
				LoadTestFile(1);
			}
			else
			{
				int id = GetSelectedTest();
				if (id >= 1)
				{
					if (AtBelow) id++;
					if (MoveDownSteps(id))
					{
						AddTestStep(id);
						LoadTestFile(id);
					}
				}
			}
		}

		private bool AddTestStep(int id)
		{		
			XElement newElement =
					new XElement(stringStep, new XAttribute(stringId, id.ToString("D4")),
						new XElement(stringCommandCodeName, "")
#if old_scheme
						new XElement(stringTestStepNote, ""),
						new XElement(stringConnectionAlias, ""),
						new XElement(stringStepParameterIndex + "0", ""),
						new XElement(stringStepParaValue + "0", ""),
						new XElement(stringStepParameterIndex + "1", ""),
						new XElement(stringStepParaValue + "1", ""),
						new XElement(stringStepParameterIndex + "2", ""),
						new XElement(stringStepParaValue + "2", ""),
						new XElement(stringStepParameterIndex + "3", ""),
						new XElement(stringStepParaValue + "3", ""),
						new XElement(stringStepParameterIndex + "4", ""),
						new XElement(stringStepParaValue + "4", ""),	// the last of MAX_PARAMETERS
						new XElement(stringScript, "")
#endif
					);
			testXmlDoc.Descendants(stringSetup).First().Add(newElement);
			return true;
		}

		private bool AddProbe(string probeAlias, string boardIndexOnTester, string pinNumberOnBoard)
		{
			string id = FindNextProbeId();
			XElement newElement =
					new XElement(stringConnection, new XAttribute(stringId, id),
						new XElement(stringConnectionAlias, probeAlias),
						new XElement(stringBoardIndexOnTester, boardIndexOnTester),
						new XElement(stringPinNumberOnBoard, pinNumberOnBoard)
					);
			testXmlDoc.Descendants(stringSetup).First().Add(newElement);
			return true;
		}

		private bool RemoveTestStep(int id)
		{
			XElement test = SearchElementById(stringStep, id);
			if (test != null)
			{
				test.Remove();
				return true;
			}
			return false;
		}

		private void SwapTestStep(bool MoveUp)
		{
			int id = GetSelectedTest();
			if (id >= 1)
			{
				int newId = id;
				if (MoveUp) newId--;
				else newId++;
				XElement step0 = SearchElementById(stringStep, id);
				XElement step1 = SearchElementById(stringStep, newId);
				if (step0 != null && step1 != null)
				{
					step0.Attribute(stringId).Value = newId.ToString("D4");
					step1.Attribute(stringId).Value = id.ToString("D4");
					LoadTestFile(newId);
				}
			}
		}

		private int GetSelectedTest()
		{
			if (listViewTestSteps.SelectedIndices.Count == 1)
			{
				return listViewTestSteps.SelectedIndices[0] + 1;	// +1 to compensate the index being started at 0
			}
			return 0;	// nothing selected
		}

		private void buttonRemove_Click(object sender, EventArgs e)
		{
			int id = GetSelectedTest();
			if (id >= 1)
			{
				if (RemoveTestStep(id))
				{
					MoveUpSteps(id);
					if (SearchElementById(stringStep, 1) == null) AddTestStep(1);
					LoadTestFile(id);
				}
			}
		}

		private void buttonAddBelow_Click(object sender, EventArgs e)
		{
			InsertTestStep(true);
		}

		private void buttonMoveUp_Click(object sender, EventArgs e)
		{
			SwapTestStep(true);
		}

		private string GetParentFolder(string path, int excludeFolder)
		{
			if (path.Length > 3)
			{
				if (path[path.Length - 1] == '\\') path = path.Substring(0, path.Length - 1);
				int index = path.LastIndexOf('\\'); // exclude the last "\"
				if (index > 0)
				{
					if (excludeFolder == 0) return path.Substring(0, index + 1);
				}
			}
			return "";
		}

		string currentFile = "";
		string stringNewTestFile = "";
		string stringTesterConfigFile = "";
		string stringModulesFile = "";

		string constStringFolderFiles = "Files\\";
		string constStringModulesFile = "modules.xml";
		string constStringNewTestFile = "new.xml";
		string constStringTesterConfigFile = "testerconfig.xml";

		const string stringCommand = "Command";
		const string stringSetup = "Setup";
		const string stringStep = "Step";
		const string stringConnection = "Connection";
		const string stringConnectionAlias = "ConnectionAlias";
		const string stringBoardIndexOnTester = "BoardIndexOnTester";
		const string stringPinNumberOnBoard = "ChannelIndexOnBoard";
		const string stringCommandName = "_Command";
		const string stringTestStepNote = "TestStepNote";
		const string stringStepParameterIndex = "ParameterCodeName-";
		const string stringStepParaValue = "ParameterValue-";
		const string stringScript = "Script";
		const string stringId = "ID";
		const string stringBarCode = "Barcode";

		const int MAX_PARAMETERS = 5;

		XDocument testXmlDoc = new XDocument();
		XDocument modulesXmlDoc = new XDocument();
		//XDocument testerConfigXmlDoc = new XDocument();


		private bool FindOrReplaceTestConnectionAlias(string alias, string replacedByNewAlias)
		{
			if (testXmlDoc != null)
			{
				if (alias.Length > 0)
				{
					var info = from element in testXmlDoc.Descendants(stringStep)
							   where ((string)element.Element(stringConnectionAlias) == alias)
							   select element;
					if (info.Count() > 0)
					{
						if (replacedByNewAlias.Length > 0)
						{
							foreach (XElement element in info.Distinct())
							{
								element.Element(stringConnectionAlias).Value = replacedByNewAlias;
							}
						}
						return true;
					}
				}
			}
			return false;
		}

		private XElement SearchElementById(string elementString, int elementId)
		{
			if (testXmlDoc != null)
			{
				if (elementId > 0)
				{
					var info = from element in testXmlDoc.Descendants(elementString)
							   where (Convert.ToInt32((string)element.Attribute(stringId)) == elementId)
							   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
				}
			}
			return null;
		}

		private XElement SearchElementByTabName(string elementString)
		{
			if (testXmlDoc != null)
			{
				var info = from element in testXmlDoc.Descendants(elementString)
						   select element;
					if (info.Count() > 0) return (XElement)info.Distinct().First();
			}
			return null;
		}

		private bool MoveDownSteps(int id)
		{
			if (testXmlDoc != null)
			{
				foreach (XElement step in testXmlDoc.Descendants(stringStep))
				{
					string str = (string)step.Attribute(stringId);
					if (str != null && str.Length > 0)
					{
						int stepId = Convert.ToInt32(str);
						if (stepId >= id)
						{
							step.Attribute(stringId).Value = (stepId + 1).ToString("D4");
						}
					}
				}
				return true;
			}
			return false;
		}

		private bool MoveUpSteps(int id)
		{
			if (testXmlDoc != null)
			{
				foreach (XElement step in testXmlDoc.Descendants(stringStep))
				{
					string str = (string)step.Attribute(stringId);
					if (str != null && str.Length > 0)
					{
						int stepId = Convert.ToInt32(str);
						if (stepId > id)
						{
							step.Attribute(stringId).Value = (stepId - 1).ToString("D4");
						}
					}
				}
				return true;
			}
			return false;
		}

		private void LoadTestFile(int id)
		{
			ShowTestSteps();
			if (id >= 1)
			{
				id--;	// -1 to compensate the index being started at 0
				listViewTestSteps.Focus();
				if (listViewTestSteps.Items.Count > id)
				{
					listViewTestSteps.Items[id].Selected = true;
					listViewTestSteps.EnsureVisible(id);
				}
			}
		}

		private string FindNextProbeId()
		{
			if (testXmlDoc != null)
			{
				for (int i = 1; ; i++)
				{
					XElement test = SearchElementById(stringConnection, i);
					if (test == null) return i.ToString();
				}
			}
			return "";
		}

		private void ShowTestSteps()
		{
			listViewTestSteps.Items.Clear();
			excelReportTestSteps.Clear();
			if (testXmlDoc != null)
			{
				for (int i = 1; ; i++)
				{
					XElement test = SearchElementById(stringStep, i);
					if (test != null)
					{
						string id = i.ToString("D4");
						string testName = (string)test.Element(stringTestStepNote);
						if (testName == null) testName = "";
						string command = (string)test.Element(stringCommandCodeName);
						if (command == null) command = "";
						string cmdAlias = SearchCommandAliasByCodeName(command);
#if old_scheme
						string connectionAlias = (string)test.Element(stringConnectionAlias);
						if (connectionAlias == null) connectionAlias = "";
						string parameters = "";
						for (int para = 0; para < MAX_PARAMETERS; para++)
						{
							string parameterIndex = stringStepParameterIndex + para.ToString();
							string parameterValue = stringStepParaValue + para.ToString();
							string codeName = (string)test.Element(parameterIndex);
							string value = (string)test.Element(parameterValue);
							if (codeName != null && codeName.Length > 0 && value != null && value.Length > 0)
							{
								/*
								string parameterAlias = SearchParameterAliasByCodeName(pin, codeName, stringParameterAlias);
								parameters += parameterAlias + "=" + value + " ";
								 * */
								if (para == 0) parameters += value;
								else parameters += " / " + value;
							}
						}
						ListViewItem item = new ListViewItem(new[] { id, connectionAlias, cmdAlias, parameters, testName });
						listViewTestSteps.Items.Add(item);
						string str = "'"+id + "\t" + connectionAlias + "\t" + cmdAlias + "\t" + parameters + "\t" + testName;
						excelReportTestSteps.Add(str);
#else
						string probeState = "";
						switch (command)
						{
							case stringCommand_SimulateInputs:
							case stringCommand_BarcodeScan:
							case stringCommand_VerifyOutputs:
							case stringCommand_WaitOutputs:
								var info = from element in test.Descendants("Probe")
										   select element;
								if (info != null && info.Count() > 0)
								{
									foreach (XElement element in info.Distinct())
									{
										string name = element.Element("Name").Value;
										string value = element.Element("Value").Value;
										if (name.Length > 0 && value.Length > 0)
										{
											if (probeState.Length > 0) probeState += "; ";
											probeState += "[" + name + "=] " + value;
										}
									}
								}
								break;
						}
						string timeParameter = "";
						switch (command)
						{
							case stringCommand_WaitOutputs:
								XElement min = test.Element("MinValue");
								XElement max = test.Element("MaxValue");
								if (min != null && min.Value.Length > 0) timeParameter += min.Value;
								else timeParameter += "0";
								timeParameter += " to ";
								if (max != null && max.Value.Length > 0) timeParameter += max.Value;
								else timeParameter += "-";
								timeParameter += " (sec)";
								break;
							case stringCommand_Wait:
								XElement wait = test.Element("Value");
								if (wait != null) timeParameter += wait.Value;
								else timeParameter += "0";
								timeParameter += " (sec)";
								break;
							case stringCommand_RepeatStart:
								XElement repeat = test.Element("RepeatNumber");
								if (repeat != null)
								{
									probeState = "[Repeat=] ";
									if (repeat.Value.Length == 0)
									{
										probeState = "Prompt operator";
									}
									else if (repeat.Value == "0")
									{
										probeState += "None";
									}
									else
									{
										probeState += repeat.Value;
										probeState += " (Times)";
									}
								}
								break;
							case stringCommand_WaitUser:
							case stringCommand_RepeatEnd:
							case stringCommand_EraseRenesas:
							case stringCommand_EraseCypress:
								break;
							//case stringCommand_Barcode:
							//	break;
							case stringCommand_FlashRenesas:
							case stringCommand_FlashMicrochip:
							case stringCommand_FlashCypress:
								XElement hexFile = test.Element("FirmwareFile");
								if (hexFile != null) probeState = "[FirmwareFile=] " + hexFile.Value;
								break;
							case stringCommand_FlashInventek:
								XElement macFile = test.Element("MacLogFile");
								if (macFile != null) probeState = "[MacLogFile=] " + macFile.Value;
								break;
							case stringCommand_ReadUart:
							case stringCommand_SearchUart:
								XElement stringId = test.Element("MessageString");
								if (stringId != null) probeState = "[Message=] " + stringId.Value;
								break;
							case stringCommand_WaitImage:
								XElement image = test.Element("Image");
								if (image != null) probeState = "[Image=] " + image.Value;
								break;
						}
						ListViewItem item = new ListViewItem(new[] { id, cmdAlias, timeParameter, probeState, testName });
						listViewTestSteps.Items.Add(item);
						string str = "'" + id + "\t" + cmdAlias + "\t" + timeParameter + "\t" + probeState + "\t" + testName;
						excelReportTestSteps.Add(str);
#endif
					}
					else
					{
						break;
					}
				}
			}
		}

		private void buttonMoveDown_Click(object sender, EventArgs e)
		{
			SwapTestStep(false);
		}

		private void comboBoxTestCommand_DropDownClosed(object sender, EventArgs e)
		{
#if old_scheme
			XElement cmd = SearchCommandByAlias(comboBoxTestObject.Text, comboBoxTestCommand.Text);
			if (cmd != null && comboBoxTestCommand.Text.Length > 0)
			{
				dataGridViewParameters.Rows.Clear();
				foreach (XElement parameter in cmd.Descendants(stringParameter))
				{
					string alias = (string)parameter.Element(stringParameterAlias);
					string codename = (string)parameter.Element(stringParameterCodeName);
					string min = (string)parameter.Element(stringParameterValueMin);
					string max = (string)parameter.Element(stringParameterValueMax);
					if (alias != null && alias.Length > 0)
					{
						DataGridViewRow r = new DataGridViewRow();
						r.CreateCells(dataGridViewParameters);
						r.Cells[0].Value = alias;
						r.Cells[1].Value = "                  ";
						r.Cells[2].Value = codename;
						r.Cells[3].Value = min;
						r.Cells[4].Value = max;
						//r.SetValues(cmdAlias, "", codename, min, max);
						dataGridViewParameters.Rows.Add(r);
					}
				}
			}
#endif
		}

		private void comboBoxTestObject_DropDownClosed(object sender, EventArgs e)
		{
#if old_scheme
			//comboBoxTestObject.Text = "";
#endif
		}

		private int ConvertTextToNumber(string str, bool mustBe1Or0, bool cannotBeEmpty, bool convertToMilliseconds, bool allowToBe0)
		{
			int floatingPointPosition = -1;
			if (str.Length > 0)
			{
				if (mustBe1Or0)
				{
					if (str != "1" && str != "0") return -1;
				}
				else
				{
					for (int i = 0; i < str.Length; i++)
					{
						if (Char.IsDigit(str[i]) == false)
						{
							if (str[i] == '.' && i > 0 && i < str.Length - 1 && floatingPointPosition == -1)	// allow '.' to appear once at the middle
							{
								floatingPointPosition = i;
							}
							else
							{
								return -1;
							}
						}
						else
						{
							if (str[0] == '0' && allowToBe0 == false && i >= 1 && str[1] != '.') return -1;	// if first digit is '0', second must be '.'
						}
					}
				}
			}
			else
			{
				if (cannotBeEmpty)
				{
					return -1;
				}
				else
				{
					return -100;
				}
			}
			if (convertToMilliseconds)
			{
				if (floatingPointPosition == -1)
				{
					if (str.Length > 0) return Convert.ToInt16(str) * 1000;
					else return 0;
				}
				else if (floatingPointPosition > 0 && floatingPointPosition < str.Length - 1)
				{
					string dec = str.Substring(0, floatingPointPosition);
					string floating = str.Substring(floatingPointPosition + 1);
					switch (floating.Length)
					{
						case 0: return -1;
						case 1: floating += "00"; break;
						case 2: floating += "0"; break;
						case 3: break;
						default: floating = floating.Substring(0, 3); break;
					}
					if (dec.Length > 0 && floating.Length > 0)
					{
						return Convert.ToInt16(dec) * 1000 + Convert.ToInt16(floating);
					}
				}
			}
			else
			{
				if (floatingPointPosition == -1 && str.Length > 0) return Convert.ToInt16(str);
			}
			return -1;
		}

		private void buttonTestUpdate_Click(object sender, EventArgs e)
		{
			int id = GetSelectedTest();
			if (id >= 1)
			{
				XElement test = SearchElementById(stringStep, id);
				if (test != null)
				{
					string command = GetCurrentSelectedCommand();
					if (command.Length == 0) return;
#if	old_scheme
					test.Element(stringCommandCodeName).Value = SearchCommandCodeNameByAlias(comboBoxTestObject.Text, comboBoxTestCommand.Text);
					test.Element(stringConnectionAlias).Value = comboBoxTestObject.Text;
					// save parameters
					for (int para = 0; para < MAX_PARAMETERS; para++)
					{
						string parameterType = stringStepParameterIndex + para.ToString();
						string parameterValue = stringStepParaValue + para.ToString();
						test.Element(parameterType).Value = "";
						test.Element(parameterValue).Value = "";
						if (dataGridViewParameters.Rows.Count > para)
						{
							DataGridViewRow r = dataGridViewParameters.Rows[para];
							string value = (string)r.Cells[1].Value;
							string codename = (string)r.Cells[2].Value;
							if (value == null) value = "";
							value = value.Trim();	// remove the added spaces
							if (codename != null && codename.Length > 0)
							{
								test.Element(parameterType).Value = codename;
								test.Element(parameterValue).Value = value;
							}
						}
					}
#else
					int incorrectSyntax = 0;
					bool incorrectSyntaxButAllowToProceed = false;
					switch (command)
					{
						case stringCommand_SimulateInputs:
						case stringCommand_BarcodeScan:
						case stringCommand_VerifyOutputs:
						case stringCommand_WaitOutputs:
							int valueSet = 0;
							for (int i = 0; i < dataGridViewProbes.Rows.Count; i++)
							{
								DataGridViewRow r = dataGridViewProbes.Rows[i];
								string value = ((string)r.Cells[1].Value).Trim();
								if (value != null && value.Length > 0)
								{
									if (ConvertTextToNumber(value, false, false, false, false) == -1) incorrectSyntax++;
									valueSet++;
								}
							}
							if (valueSet == 0)
							{
								incorrectSyntax++;
								if (command == stringCommand_VerifyOutputs) incorrectSyntaxButAllowToProceed = true;
							}
							break;
					}
					switch (command)
					{
						case stringCommand_WaitOutputs:
							if (ConvertTextToNumber(textBoxMinDelay.Text.Trim(), false, false, true, false) == -1) incorrectSyntax++;
							if (ConvertTextToNumber(textBoxMaxDelay.Text.Trim(), false, true, true, false) == -1) incorrectSyntax++;
							break;
						case stringCommand_Wait:
							if (ConvertTextToNumber(textBoxMinDelay.Text.Trim(), false, true, true, false) == -1) incorrectSyntax++;
							break;
						case stringCommand_RepeatStart:
							if (ConvertTextToNumber(textBoxMinDelay.Text.Trim(), false, false, false, true) == -1) incorrectSyntax++;
							break;
						case stringCommand_WaitUser:
						case stringCommand_RepeatEnd:
							break;
						case stringCommand_EraseRenesas:
						case stringCommand_EraseCypress:
							if (comboBoxBoard.Text.Trim().Length == 0) incorrectSyntax++;
							break;
						//case stringCommand_Barcode:
						//	break;
						case stringCommand_FlashRenesas:
						case stringCommand_FlashMicrochip:
						case stringCommand_FlashCypress:
						case stringCommand_FlashInventek:
						case stringCommand_ReadUart:
						case stringCommand_SearchUart:
							if (textBoxHexFile.Text.Trim().Length == 0) incorrectSyntax++;
							if (comboBoxBoard.Text.Trim().Length == 0) incorrectSyntax++;
							break;
						case stringCommand_WaitImage:
							if (textBoxHexFile.Text.Trim().Length == 0) incorrectSyntax++;
							//if (ConvertTextToNumber(textBoxMinDelay.Text.Trim(), false, true, true, true) == -1) incorrectSyntax++;
							break;
					}
					if (incorrectSyntax > 0)
					{
						if (incorrectSyntax == 1 && incorrectSyntaxButAllowToProceed)
						{
							if (MessageBox.Show("You intend to verify outputs but don't care about their value. Are you sure to continue?", "Verify Output", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
							{
								return;
							}
						}
						else
						{
							MessageBox.Show("Incorrect or incomplete entry in one of the fields");
							return;
						}
					}
					test.RemoveNodes();
					XElement cmd = new XElement(stringCommandCodeName, command);
					test.Add(cmd);
					XElement alias = new XElement(stringCommandName, GetCommandAlias(command));
					test.Add(alias);
					// time parameter
					switch (command)
					{
						case stringCommand_WaitOutputs:
							{
								string min = textBoxMinDelay.Text.Trim();
								string max = textBoxMaxDelay.Text.Trim();
								int msMin = ConvertTextToNumber(min, false, false, true, false);
								int msMax = ConvertTextToNumber(max, false, false, true, false);
								if (msMin >= 0 && msMax > 0)	// expected, because it was checked before
								{
									XElement v0 = new XElement("MinValue", min);	test.Add(v0);
									XElement v1 = new XElement("MaxValue", max);	test.Add(v1);
									XElement ms0 = new XElement("_MinValue", msMin.ToString()); test.Add(ms0);
									XElement ms1 = new XElement("_MaxValue", msMax.ToString()); test.Add(ms1);
									XElement u = new XElement("_Unit", "ms"); test.Add(u);
								}
							}
							break;
						case stringCommand_Wait:
							{
								string min = textBoxMinDelay.Text.Trim();
								int msMin = ConvertTextToNumber(min, false, true, true, false);
								if (msMin > 0)	// expected, because it was checked before
								{
									XElement v0 = new XElement("Value", min); test.Add(v0);
									XElement ms0 = new XElement("_Value", msMin.ToString()); test.Add(ms0);
									XElement u = new XElement("_Unit", "ms"); test.Add(u);
								}
							}
							break;
						case stringCommand_WaitImage:
							{
								/*
								string min = textBoxMinDelay.Text.Trim();
								int msMin = ConvertTextToNumber(min, false, true, true, false);
								if (msMin >= 0)	// expected, because it was checked before
								{
									XElement v0 = new XElement("Value", min); test.Add(v0);
									XElement _v0 = new XElement("_Value", min.ToString()); test.Add(_v0);
								}
								 * */
								string image = textBoxHexFile.Text.Trim();
								if (image.Length > 0)	// expected, because it was checked before
								{
									XElement i = new XElement("Image", image); test.Add(i);
									XElement i_script = new XElement("_Image", image); test.Add(i_script);
								}
							}
							break;
						case stringCommand_RepeatStart:
							{
								string min = textBoxMinDelay.Text.Trim();
								int msMin = ConvertTextToNumber(min, false, false, false, false);
								if (msMin >= 0)	// expected, because it was checked before
								{
									XElement v0 = new XElement("RepeatNumber", min); test.Add(v0);
									XElement ms0 = new XElement("_RepeatNumber", msMin.ToString()); test.Add(ms0);
								}
								else if (msMin == -100)	// expected, because it was checked before
								{
									XElement v0 = new XElement("RepeatNumber", ""); test.Add(v0);
									XElement ms0 = new XElement("_RepeatNumber", ""); test.Add(ms0);
								}
							}
							break;
						case stringCommand_WaitUser:
						case stringCommand_RepeatEnd:
							break;
						//case stringCommand_Barcode:
						//	break;
					}
					// pin states
					switch (command)
					{
						case stringCommand_EraseRenesas:
						case stringCommand_EraseCypress:
							{
								string boardName = comboBoxBoard.Text;
								if (boardName != null && boardName.Length > 0)
								{
									foreach (XElement obj in testXmlDoc.Descendants(stringBoardOnTester))
									{
										string board = (string)obj.Element(stringBoardIndexOnTester);
										XElement module = SearchModuleByPosition(board);
										if (module != null)
										{
											string name = module.Element(stringModuleAlias).Value;
											if (boardName == GetBoardName(name, board))
											{
												XElement b = new XElement("BoardId", board); test.Add(b);
												XElement n = new XElement("_Board", name); test.Add(n);
												XElement board_addr = new XElement("_BoardAddr", board); test.Add(board_addr);
												break;
											}
										}
									}
								}
							}
							break;
						case stringCommand_FlashRenesas:
						case stringCommand_FlashMicrochip:
						case stringCommand_FlashCypress:
						case stringCommand_FlashInventek:
							{
								string boardName = comboBoxBoard.Text;
								if (boardName != null && boardName.Length > 0)
								{
									foreach (XElement obj in testXmlDoc.Descendants(stringBoardOnTester))
									{
										string board = (string)obj.Element(stringBoardIndexOnTester);
										XElement module = SearchModuleByPosition(board);
										if (module != null)
										{
											string name = module.Element(stringModuleAlias).Value;
											if (boardName == GetBoardName(name, board))
											{
												XElement b = new XElement("BoardId", board); test.Add(b);
												XElement n = new XElement("_Board", name); test.Add(n);
												XElement board_addr = new XElement("_BoardAddr", board); test.Add(board_addr);
												break;
											}
										}
									}
								}
								string hex = textBoxHexFile.Text.Trim();
								if (hex.Length > 0)	// expected, because it was checked before
								{
									if (command == stringCommand_FlashInventek)
									{
										XElement h = new XElement("MacLogFile", hex); test.Add(h);
										XElement h_script = new XElement("_MacLogFile", hex); test.Add(h_script);
									}
									else
									{
										XElement h = new XElement("FirmwareFile", hex); test.Add(h);
										XElement h_script = new XElement("_FirmwareFile", hex); test.Add(h_script);
									}
								}
							}
							break;
						case stringCommand_ReadUart:
						case stringCommand_SearchUart:
							{
								string boardName = comboBoxBoard.Text;
								if (boardName != null && boardName.Length > 0)
								{
									foreach (XElement obj in testXmlDoc.Descendants(stringBoardOnTester))
									{
										string board = (string)obj.Element(stringBoardIndexOnTester);
										XElement module = SearchModuleByPosition(board);
										if (module != null)
										{
											string name = module.Element(stringModuleAlias).Value;
											if (boardName == GetBoardName(name, board))
											{
												XElement b = new XElement("BoardId", board); test.Add(b);
												XElement n = new XElement("_Board", name); test.Add(n);
												XElement board_addr = new XElement("_BoardAddr", board); test.Add(board_addr);
												break;
											}
										}
									}
								}
								string hex = textBoxHexFile.Text.Trim();
								if (hex.Length > 0)	// expected, because it was checked before
								{
									XElement h = new XElement("MessageString", hex); test.Add(h);
									XElement h_script = new XElement("_MessageString", hex); test.Add(h_script);
								}
							}
							break;
						case stringCommand_SimulateInputs:
						case stringCommand_BarcodeScan:
						case stringCommand_VerifyOutputs:
						case stringCommand_WaitOutputs:
							bool boardWritten = false;
							int channel_num = 0;
							int writtenChannels = 0;
							for (int i = 0; i < dataGridViewProbes.Rows.Count; i++)
							{
								DataGridViewRow r = dataGridViewProbes.Rows[i];
								string pin = (string)r.Cells[0].Value;
								string value = (string)r.Cells[1].Value;
								string specialFlameBoardAdditionalChannels = (string)r.Cells[2].Value;
								specialFlameBoardAdditionalChannels = specialFlameBoardAdditionalChannels.Trim();
								string specialPowerBoardAdditionalChannels = (string)r.Cells[3].Value;
								specialPowerBoardAdditionalChannels = specialPowerBoardAdditionalChannels.Trim();
								if (value != null)
								{
									value = value.Trim();
									string board = "";
									string channel = "";
									if (pin.Length > 0)
									{
										XElement probe = SearchForProbeElement(pin, "", "");
										if (probe != null)
										{
											board = (string)probe.Element(stringBoardIndexOnTester);
											channel = (string)probe.Element(stringPinNumberOnBoard);
											if (boardWritten == false)
											{
												if (board != null && board.Length > 0 && channel != null && channel.Length > 0)
												{
													XElement b = new XElement("BoardId", board);
													test.Add(b);
													XElement module = SearchModuleByPosition(board);
													if (module != null)
													{
														string name = module.Element(stringModuleAlias).Value;
														XElement n = new XElement("_Board", name);
														test.Add(n);
														XElement board_addr = new XElement("_BoardAddr", board);
														test.Add(board_addr);														
														string totalChannels = "";
														if (command == stringCommand_SimulateInputs || command == stringCommand_BarcodeScan)
														{
															totalChannels = stringModuleTotalChannelsOut;
														}
														else totalChannels = stringModuleTotalChannelsIn;
														string total_num = module.Element(totalChannels).Value;
														if (total_num.Length > 0)
														{
															try
															{
																channel_num = Convert.ToInt16(total_num);
															}
															catch
															{
															}
														}
													}
													boardWritten = true;
												}
											}
											if (boardWritten && channel != null && channel.Length > 0)
											{
												switch (command)
												{
													case stringCommand_SimulateInputs:
													case stringCommand_BarcodeScan:
														{
															writtenChannels++;
															XElement newElement =
																	new XElement("Probe", new XAttribute(stringId, writtenChannels.ToString("D2")),
																		new XElement("Name", pin),
																		new XElement("BoardId", board),
																		new XElement("ChannelId", channel),
																		new XElement("Value", value)
																		);
															test.Add(newElement);
															if (specialFlameBoardAdditionalChannels.Length > 0)
															{
																// to expand from one channel to a couple
																string ch = "";
																int new_channel_num = Convert.ToInt16(specialFlameBoardAdditionalChannels);
																for (int j = 1; j <= new_channel_num; j++)
																{
																	ch = "_CH" + j.ToString();
																	string new_value = "0";
																	if (j.ToString() == value) new_value = "1";
																	XElement v = new XElement(ch, new_value);
																	test.Add(v);
																}
																// below is the addition for the HSI activation
																ch = "_CH" + (new_channel_num + 1).ToString();
																XElement special_hsi_ele = new XElement(ch, "1");
																test.Add(special_hsi_ele);
															}
															else if (specialPowerBoardAdditionalChannels.Length > 0)
															{
																// to expand from one channel to a couple
																string ch = "";
																int new_channel_num = Convert.ToInt16(specialPowerBoardAdditionalChannels);
																int this_channel_num = Convert.ToInt16(channel);
																for (int j = 0; j < new_channel_num; j++)
																{
																	ch = "_CH" + (j + this_channel_num).ToString();
																	string new_value = "0";
																	if ((j + 1).ToString() == value) new_value = "1";
																	XElement v = new XElement(ch, new_value);
																	test.Add(v);
																}
															}
															else
															{
																string ch = "_CH" + channel;
																XElement v = new XElement(ch, value);
																test.Add(v);
															}
														}
														break;
													case stringCommand_VerifyOutputs:
													case stringCommand_WaitOutputs:
														{
															string ch0 = "_CH" + channel + "Min";
															string value0 = "0";
															if (value.Length > 0) value0 = value;
															XElement v0 = new XElement(ch0, value0);
															test.Add(v0);
															string ch1 = "_CH" + channel + "Max";
															string value1 = "1";
															if (value.Length > 0) value1 = value;
															XElement v1 = new XElement(ch1, value1);
															test.Add(v1);
															writtenChannels++;
															XElement newElement =
																	new XElement("Probe", new XAttribute(stringId, writtenChannels.ToString("D2")),
																		new XElement("Name", pin),
																		new XElement("BoardId", board),
																		new XElement("ChannelId", channel),
																		new XElement("Value", value)
																		);
															test.Add(newElement);
														}
														break;
												}
											}
										}
									}
								}
							}
							for (int i = writtenChannels + 1; i <= channel_num; i++)
							{
								switch (command)
								{
									case stringCommand_SimulateInputs:
									case stringCommand_BarcodeScan:
										{
											string ch = "_CH" + i.ToString();
											XElement v = new XElement(ch, "");
											test.Add(v);
										}
										break;
									case stringCommand_VerifyOutputs:
									case stringCommand_WaitOutputs:
										{
											string ch0 = "_CH" + i.ToString() + "Min";
											XElement v0 = new XElement(ch0, "0");
											test.Add(v0);
											string ch1 = "_CH" + i.ToString() + "Max";
											XElement v1 = new XElement(ch1, "1");
											test.Add(v1);
										}
										break;
								}
							}
							break;
					}
					XElement note = new XElement(stringTestStepNote, textBoxTestName.Text.Trim());
					test.Add(note);
#endif
					LoadTestFile(id);
				}
			}
		}

		private void listViewTestSteps_SelectedIndexChanged(object sender, EventArgs e)
		{
			labelProbes.Text = "";
			int id = GetSelectedTest();
			if (id >= 1)
			{
				XElement test = SearchElementById(stringStep, id);
				if (test != null)
				{
#if	old_scheme
					dataGridViewParameters.Rows.Clear();
					comboBoxTestObject.Items.Clear();
					comboBoxTestCommand.Items.Clear();
					string obj = test.Element(stringConnectionAlias).Value;
					if (obj != null && obj.Length > 0)
					{
						XElement probe = SearchForProbeElement(obj, "", "");
						if (probe != null)
						{
							XElement pin = SearchPinByProbeName(obj);
							if (pin != null)
							{
								string direction = pin.Element(stringIoDirection).Value;
								if (direction != null && direction.Length > 0)
								{
									foreach (string testType in comboBoxTestType.Items)
									{
										string ioDirection = "";
										switch (testType[testType.Length - 2])
										{
											case 'O':
												ioDirection = stringIoDirection_Input;
												break;
											case 'I':
												ioDirection = stringIoDirection_Output;
												break;
											case 'T':
												ioDirection = stringIoDirection_Input;
												break;
											default:	// 'W'
												ioDirection = "W";
												break;
										}
										if (ioDirection == direction)
										{
											comboBoxTestType.Text = testType;
											break;
										}
									}
								}
							}
						}
						comboBoxTestObject.Items.Add(obj);
						comboBoxTestObject.SelectedIndex = 0;
					}
					else
					{
						foreach (string testType in comboBoxTestType.Items)
						{
							string ioDirection = "";
							switch (testType[testType.Length - 2])
							{
								case 'O':
								case 'I':
								case 'T':
									break;
								default:	// 'W'
									ioDirection = "W";
									break;
							}
							if (ioDirection.Length > 0)
							{
								comboBoxTestType.Text = testType;
								break;
							}
						}
					}
					string cmd = test.Element(stringCommandCodeName).Value;
					if (cmd != null && cmd.Length > 0)
					{
						string alias = SearchCommandAliasByCodeName(cmd);
						comboBoxTestCommand.Items.Add(alias);
						comboBoxTestCommand.SelectedIndex = 0;
						//parameters
						for (int para = 0; para < MAX_PARAMETERS; para++)
						{
							string parameterIndex = stringStepParameterIndex + para.ToString();
							string parameterValue = stringStepParaValue + para.ToString();
							string parameterCodeName = test.Element(parameterIndex).Value;
							if (parameterCodeName != null && parameterCodeName.Length > 0)
							{
								string value = "";
									
								value = test.Element(parameterValue).Value;
								if (value == null) value = "";
								value += "                  ";
								DataGridViewRow r = new DataGridViewRow();
								r.CreateCells(dataGridViewParameters);
								r.Cells[0].Value = SearchParameterAliasByCodeName(cmd, parameterCodeName, stringParameterAlias);
								r.Cells[1].Value = value;
								r.Cells[2].Value = parameterCodeName;
								r.Cells[3].Value = SearchParameterAliasByCodeName(cmd, parameterCodeName, stringParameterValueMin);
								r.Cells[4].Value = SearchParameterAliasByCodeName(cmd, parameterCodeName, stringParameterValueMax);
								dataGridViewParameters.Rows.Add(r);
							}
						}
					}
#else
					HideCommandDetails();
					string command = test.Element(stringCommandCodeName).Value;
					if (command != null && command.Length > 0)
					{
						string cmdAlias = SearchCommandAliasByCodeName(command);
						if (cmdAlias.Length > 0)
						{
							comboBoxTestType.Text = cmdAlias;
							PopulateCommandDetails("");
						}
					}		
#endif
				}
			}
		}

		private string GetCurrentSelectedCommand()
		{
			string testType = comboBoxTestType.Text.Trim();
#if old_scheme
			string cmdAlias = SearchCommandAliasByCodeName(command);
			if (testType != null && testType.Length > 3)
			{
				switch (testType[testType.Length - 2])
				{
					case 'O':
						return stringIoDirection_Output;
					case 'I':
						return stringIoDirection_Input;
					case 'T':
						return "T";
					case 'W':
						return "W";
				}
			}
			return "";
#else
			string cmd = SearchCommandCodeNameByAlias("", testType);
			return cmd;
#endif
		}

		private string GetCurrentSelectedCommandIoDirection()
		{
			string command = GetCurrentSelectedCommand();
			switch (command)
			{
				case stringCommand_VerifyOutputs:
				case stringCommand_WaitOutputs:
					return stringIoDirection_Input;
				case stringCommand_SimulateInputs:
				case stringCommand_BarcodeScan:
					return stringIoDirection_Output;
			}
			return "";
		}

		private string GetCommandAlias(string command)
		{
			switch (command)
			{
				case stringCommand_VerifyOutputs:
					return "SetInputs";
				case stringCommand_SimulateInputs:
					return "SetOutputs";
				case stringCommand_BarcodeScan:
					return "BarcodeScan";
				case stringCommand_WaitOutputs:
					return "WaitTill";
				case stringCommand_Wait:
					return "Wait";
				case stringCommand_WaitUser:
					return "WaitForUserInput";
				case stringCommand_RepeatEnd:
					return "RepeatEnd";
				case stringCommand_RepeatStart:
					return "RepeatStart";
				//case stringCommand_Barcode:
				//	return "Barcode";
				case stringCommand_FlashRenesas:
					return "FlashRenesas";
				case stringCommand_FlashMicrochip:
					return "FlashMicrochip";
				case stringCommand_FlashCypress:
					return "FlashCypress";
				case stringCommand_FlashInventek:
					return "FlashInventek";
				case stringCommand_EraseRenesas:
					return "EraseRenesas";
				case stringCommand_EraseCypress:
					return "EraseCypress";
				case stringCommand_ReadUart:
					return "UartRead";
				case stringCommand_SearchUart:
					return "UartSearch";
				case stringCommand_WaitImage:
					return "WaitForImageInstr";
			}
			return "";
		}

		private void comboBoxTestObject_DropDown(object sender, EventArgs e)
		{
#if old_scheme
			comboBoxTestObject.Items.Clear();
			if (testXmlDoc != null)
			{
				string ioDirection = GetCurrentSelectedCommandIoDirection();
				foreach (XElement obj in testXmlDoc.Descendants(stringConnection))
				{
					string str = (string)obj.Element(stringConnectionAlias);
					if (ioDirection == stringIoDirection_Input || ioDirection == stringIoDirection_Output)
					{
						string board = (string)obj.Element(stringBoardIndexOnTester);
						string pinNumber = (string)obj.Element(stringPinNumberOnBoard);
						XElement pin = SearchPinById(board, pinNumber);
						if (pin != null)
						{
							string direction = pin.Element(stringIoDirection).Value;
							if (direction != null && direction.Length > 0)
							{
								if (direction == ioDirection)
								{
									comboBoxTestObject.Items.Add(str);
								}
							}
						}
					}
					else if (ioDirection == "")
					{
						comboBoxTestObject.Items.Add(str);
					}
					else if (ioDirection == "W")
					{
					}
				}
			}
#endif
		}

		private void comboBoxTestCommand_DropDown(object sender, EventArgs e)
		{
#if old_scheme
			comboBoxTestCommand.Items.Clear();
			if (testXmlDoc != null)
			{
				// depends on comboBoxTestObject.Text
				if (comboBoxTestObject.Text.Length > 0)
				{
					XElement pin = SearchPinByProbeName(comboBoxTestObject.Text);
					if (pin != null)
					{
						foreach (XElement cmd in pin.Descendants(stringApplicableCommand))
						{
							string commandId = (string)cmd.Element(stringCommandCodeName);
							if (commandId != null && commandId.Length > 0)
							{
								XElement command = SearchCommandByCodeName(commandId);
								if (command != null)
								{
									string commandName = (string)command.Element(stringCommandAlias);
									if (commandName != null && commandName.Length > 0)
									{
										comboBoxTestCommand.Items.Add(commandName);
									}
								}
							}
						}
					}
				}
				else
				{
					string c = comboBoxTestType.Text[comboBoxTestType.Text.Length - 2].ToString();
					XElement command = SearchCommandByCodeName(c.ToString());
					if (command != null)
					{
						string commandName = (string)command.Element(stringCommandAlias);
						if (commandName != null && commandName.Length > 0)
						{
							comboBoxTestCommand.Items.Add(commandName);
						}
					}
				}
			}
#endif
		}

		private void listViewTestSteps_MouseClick(object sender, MouseEventArgs e)
		{
			listViewTestSteps_SelectedIndexChanged(sender, e);
		}

		private void treeViewConnections_DoubleClick(object sender, EventArgs e)
		{
			buttonAddConnection_Click(sender, e);
		}

		private void buttonAddConnection_Click(object sender, EventArgs e)
		{
			using (FormTextInput dlg = new FormTextInput())
			{
				TreeNode node = treeViewConnections.SelectedNode;
				if (node != null)
				{
					TreeNode parent = node.Parent;
					if (parent != null)
					{
						string boardIndexOnTester = (string)parent.Tag;
						string pinNumberOnBoard = (string)node.Tag;
						XElement obj = SearchForProbeElement("", boardIndexOnTester, pinNumberOnBoard);
						if (obj == null)
						{
							XElement pin = SearchPinById(boardIndexOnTester, pinNumberOnBoard);
							if (pin != null)
							{
								string ioDirection = (string)pin.Element(stringIoDirection).Value;
								if (ioDirection == "-")
								{
									MessageBox.Show("This is a reference pin without a specific function.");
									return;
								}
							}
							DialogResult result = dlg.ShowDialog();
							switch (result)
							{
								case System.Windows.Forms.DialogResult.OK:
									string newName = dlg.textBoxInput.Text.Trim();
									if (newName.Length > 0)
									{
										// check if replacedByNewAlias is currently used, proceed if only not
										if (SearchForProbeElement(newName, "", "") == null)
										{
											AddProbe(newName, boardIndexOnTester, pinNumberOnBoard);
											ShowTesterConnections(boardIndexOnTester, pinNumberOnBoard);
										}
										else
										{
											MessageBox.Show("Probe name \"" + newName + "\" is already used.");
										}
									}
									break;
							}
						}
					}
				}
			}
		}

		private void buttonRenameConnection_Click(object sender, EventArgs e)
		{
			using (FormTextInput dlg = new FormTextInput())
			{
				TreeNode node = treeViewConnections.SelectedNode;
				if (node != null)
				{
					TreeNode parent = node.Parent;
					if (parent != null)
					{
						string board = (string)parent.Tag;
						string channel = (string)node.Tag;
						XElement obj = SearchForProbeElement("", board, channel);
						if (obj != null)
						{
							string oldName = (string)obj.Element(stringConnectionAlias);
							if (oldName != null && oldName.Length > 0)
							{
								dlg.textBoxInput.Text = oldName;
								DialogResult result = dlg.ShowDialog();
								switch (result)
								{
									case System.Windows.Forms.DialogResult.OK:
										string newName = dlg.textBoxInput.Text.Trim();
										if (newName.Length > 0 && newName != oldName)
										{
											// check if replacedByNewAlias is currently used, proceed if only not
											if (SearchForProbeElement(newName, "", "") == null)
											{
												FindOrReplaceTestConnectionAlias(oldName, newName);
												obj.Element(stringConnectionAlias).Value = newName;
												ShowTesterConnections(board, channel);
												ShowTestSteps();
											}
											else
											{
												MessageBox.Show("Probe name \"" + newName + "\" is already used.");
											}
										}
										break;
								}
							}
						}
					}
				}
			}
		}

		private void buttonReconnect_Click(object sender, EventArgs e)
		{
			using (FormTestConnection dlg = new FormTestConnection())
			{
				TreeNode node = treeViewConnections.SelectedNode;
				if (node != null)
				{
					TreeNode parent = node.Parent;
					if (parent != null)
					{
						string boardIndexOnTester = (string)parent.Tag;
						string pinNumberOnBoard = (string)node.Tag;
						XElement obj = SearchForProbeElement("", boardIndexOnTester, pinNumberOnBoard);
						if (obj != null)
						{
							if (testXmlDoc != null)
							{
								for (int i = 1; ; i++)
								{
									string position = i.ToString();
									XElement board = SearchBoardByPosition(position);
									if (board != null)
									{
										dlg.comboBoxBoard.Items.Add(position);
									}
									else
									{
										break;
									}
								}
							}
							dlg.comboBoxBoard.Text = boardIndexOnTester;
							dlg.comboBoxChannel.Text = pinNumberOnBoard;
							DialogResult result = dlg.ShowDialog();
							switch (result)
							{
								case System.Windows.Forms.DialogResult.OK:
									string board = dlg.comboBoxBoard.Text;
									string newPinNumber = dlg.comboBoxChannel.Text;
									if (board.Length > 0 && newPinNumber.Length > 0)
									{
										XElement pin = SearchPinById(board, newPinNumber);
										if (pin != null)
										{
											string ioDirection = (string)pin.Element(stringIoDirection).Value;
											if (ioDirection == "-")
											{
												MessageBox.Show("This is a reference pin without a specific function.");
											}
											else
											{
												// check if board is currently used, proceed if only not
												if (SearchForProbeElement("", board, newPinNumber) == null)
												{
													obj.Element(stringBoardIndexOnTester).Value = board;
													obj.Element(stringPinNumberOnBoard).Value = newPinNumber;
													ShowTesterConnections(board, newPinNumber);
												}
												else
												{
													MessageBox.Show("The pin you selected\n(board #" + board + ", pin #" + newPinNumber + ")\nis already used.");
												}
											}
										}
										else
										{
											MessageBox.Show("The pin you selected (pin #" + newPinNumber + ") is not available on board #" + board + ".");
										}
									}
									break;
							}
						}
					}
				}
			}
		}

		private void buttonRemoveConnection_Click(object sender, EventArgs e)
		{
			TreeNode node = treeViewConnections.SelectedNode;
			if (node != null)
			{
				TreeNode parent = node.Parent;
				if (parent != null)
				{
					string board = (string)parent.Tag;
					string channel = (string)node.Tag;
					XElement obj = SearchForProbeElement("", board, channel);
					if (obj != null)
					{
						string alias = (string)obj.Element(stringConnectionAlias);
						if (alias != null && alias.Length > 0)
						{
							// check if probe is currently used by test, proceed if only not
							if (FindOrReplaceTestConnectionAlias(alias, "") == false)
							{
								if (MessageBox.Show("Are you sure to remove the probe?", "Remove Probe", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
								{
									obj.Remove();
									ShowTesterConnections(board, channel);
								}
							}
							else
							{
								MessageBox.Show("Probe \"" + alias + "\" cannot be removed because it is currently used in the test procedure.");
							}
						}
					}
				}
			}
		}

		private void toolStripMenuItem2_Click(object sender, EventArgs e)
		{
			tabControl1.SelectedTab = tabPageProbeSetup;
		}

		private void testProcedureToolStripMenuItem_Click(object sender, EventArgs e)
		{
			tabControl1.SelectedTab = tabPageTestProcedure;
		}

		private void moduleBoardsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			tabControl1.SelectedTab = tabPageModuleFunctionality;
		}

		private void boardSetupToolStripMenuItem_Click(object sender, EventArgs e)
		{
			tabControl1.SelectedTab = tabPageBoardSetup;
		}

		private void VerifyBoardSetup()
		{
			if (testXmlDoc != null)
			{
				comboBoxBoard.Items.Clear();
				XElement m = SearchModuleByPosition("1");
				if (m == null)	// for older files, board setup were not embedded in the file. Retrieve it from the tester config file and embed it in the file 
				{
					if (stringTesterConfigFile.Length > 0 && File.Exists(stringTesterConfigFile))
					{
						XDocument testerConfigXmlDoc = XDocument.Load(stringTesterConfigFile);	// load it
						if (testerConfigXmlDoc != null)
						{
							var info = from element in testerConfigXmlDoc.Descendants(stringBoardOnTester)
									   select element;
							if (info != null && info.Count() > 0)
							{
								foreach (XElement element in info.Distinct())
								{
									testXmlDoc.Descendants(stringSetup).First().Add(element);
								}
							}
						}
					}
				}
				bool boardSetupInTestFile = false;
				for (int i = 1; ; i++)
				{
					XElement module = SearchModuleByPosition(i.ToString());
					if (module != null)
					{
						string name = GetBoardName(module.Element(stringModuleAlias).Value, i.ToString());
						comboBoxBoard.Items.Add(name);
						boardSetupInTestFile = true;
					}
					else
					{
						break;
					}
				}
				if (boardSetupInTestFile == false)
				{
					MessageBox.Show("Error: Board setup information not found.");
				}
			}
		}

		private void newToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (stringNewTestFile.Length > 0 && File.Exists(stringNewTestFile))
			{
				testXmlDoc = XDocument.Load(stringNewTestFile);	// load it
				currentFile = "";
				if (testXmlDoc != null)
				{
					VerifyBoardSetup();
					AddTestStep(1);
					ShowTestSteps();
					ShowTesterConnections("", "");
					HideCommandDetails();
				}
			}
		}

		private void openToolStripMenuItem_Click(object sender, EventArgs e)
		{
			OpenFileDialog dlg = new OpenFileDialog();
			dlg.Filter = "ICM Universal Tester files (*.iut)|*.iut|All files (*.*)|*.*";
			dlg.DefaultExt = ".iut";
			DialogResult result = dlg.ShowDialog();
			if (result == System.Windows.Forms.DialogResult.OK)
			{
				string file = dlg.FileName;
				if (file.Length > 0 && File.Exists(file))
				{
					try
					{
						testXmlDoc = XDocument.Load(file);	// load it
						if (testXmlDoc != null)
						{
							currentFile = file;
							VerifyBoardSetup();
							ShowTestSteps();
							ShowTesterConnections("", "");
						}
					}
					catch (Exception ex)
					{
						MessageBox.Show(ex.ToString());
					}
				}
			}
		}

		private void saveToolStripMenuItem_Click(object sender, EventArgs e)
		{
			if (currentFile.Length > 0)
			{
				SaveTestFile(currentFile);
			}
			else
			{
				saveAsToolStripMenuItem_Click(sender, e);
			}
		}

		private void SaveTestFile(string filePath)
		{
			if (testXmlDoc != null)
			{
				foreach (var g in testXmlDoc.Descendants(stringSetup))
				{
					var v = g.Elements(stringStep).ToList();
					v.Remove();
					g.Add(v.OrderBy(c => c.Attribute(stringId).Value));
				}
				XElement barcode = SearchElementByTabName(stringBarCode);
				if (barcode != null) barcode.Remove();
#if old_scheme
				for (int i = 1; ; i++)
				{
					XElement test = SearchElementById(stringStep, i);
					if (test != null)
					{
						string id = i.ToString("D4");
						string name = (string)test.Element(stringTestStepNote);
						if (name == null) name = "";
						string command = (string)test.Element(stringCommandCodeName);
						if (command == null) command = "";
						string obj = (string)test.Element(stringConnectionAlias);
						if (obj == null) obj = "";
						string board = "";
						string channel = "";
						if (obj.Length > 0)
						{
							XElement probe = SearchForProbeElement(obj, "", "");
							if (probe != null)
							{
								board = (string)probe.Element(stringBoardIndexOnTester);
								channel = (string)probe.Element(stringPinNumberOnBoard);
							}
						}
						string script = id + ";" + board + ";" + channel + ";" + command + ";";
						for (int para = 0; para < MAX_PARAMETERS; para++)
						{
							string parameterType = stringStepParameterIndex + para.ToString();
							string parameterValue = stringStepParaValue + para.ToString();
							string type = (string)test.Element(parameterType);
							string value = (string)test.Element(parameterValue);
							if (type != null && type.Length > 0 && value != null && value.Length > 0)
							{
								script += type + "=" + value + ";";
							}
						}
						script += name;
						XElement note = new XElement(stringScript, script);
						test.Add(note); ;
					}
					else
					{
						break;
					}
				}
#endif
				if (checkBoxBarcode.Checked)
				{
					XElement newElement = new XElement(stringBarCode, "1");
					testXmlDoc.Descendants(stringSetup).First().Add(newElement);
				}
				
				for (int i = 1; ; i++)
				{
					XElement test = SearchElementById(stringStep, i);
					if (test != null)
					{
						string command = "";
						XElement cmd = test.Element(stringCommandCodeName);
						if (cmd != null) command = cmd.Value;
						if (command != null && (command == stringCommand_SimulateInputs || command == stringCommand_BarcodeScan))
						{
							for (int j = 1; j < 1000; j++)	// a big number that will be exit before it is reached
							{
								string ch = "_CH" + j.ToString();
								XElement ele = test.Element(ch);
								if (ele != null)
								{
									string v = (string)ele.Value;
									if (v.Length == 0)
									{
										string prevV = "0";
										string board = (string)test.Element("BoardId");
										if (board != null && board.Length > 0)
										{
											for (int k = i - 1; k >= 1; k--)
											{
												XElement prevTest = SearchElementById(stringStep, k);
												if (prevTest != null)
												{
													string prevBoard = (string)prevTest.Element("BoardId");
													if (board == prevBoard)
													{
														XElement prevEle = prevTest.Element(ch);
														if (prevEle != null)
														{
															prevV = (string)prevEle.Value;
															break;
														}
													}
												}
											}
											ele.Value = prevV;
										}
									}
								}
								else
								{
									break;
								}
							}
						}
					}
					else
					{
						break;
					}
				}
				testXmlDoc.Save(filePath);
				currentFile = filePath;
			}
		}

		private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
		{
			SaveFileDialog dlg = new SaveFileDialog();
			dlg.FileName = currentFile;
			dlg.Filter = "ICM Universal Tester files (*.iut)|*.iut|All files (*.*)|*.*";
			dlg.DefaultExt = ".iut";
			DialogResult result = dlg.ShowDialog();
			if (result == System.Windows.Forms.DialogResult.OK)
			{
				if (dlg.FileName.Length > 0)
				{
					SaveTestFile(dlg.FileName);
				}
			}
		}

		private void printToolStripMenuItem_Click(object sender, EventArgs e)
		{
			string newFileName = currentFile;
			if (tabControl1.SelectedTab == tabPageBoardSetup)
			{
				newFileName += " - Tester Setup";
			}
			else if (tabControl1.SelectedTab == tabPageProbeSetup)
			{
				newFileName += " - Probe Setup";
			}
			else if (tabControl1.SelectedTab == tabPageTestProcedure)
			{
				newFileName += " - Test Procedure";
			}
			newFileName += ".xls";
			SaveFileDialog dlg = new SaveFileDialog();
			dlg.FileName = newFileName;
			dlg.Filter = "Excel files (*.xls)|*.xls|All files (*.*)|*.*";
			dlg.DefaultExt = ".xls";
			DialogResult result = dlg.ShowDialog();
			if (result == System.Windows.Forms.DialogResult.OK)
			{
				dlg.FileName = dlg.FileName.Trim();
				if (dlg.FileName.Length > 0)
				{
					if (currentFile.ToLower() == dlg.FileName.ToLower())
					{
						MessageBox.Show("You must use a different file name.");
						return;
					}
					if (tabControl1.SelectedTab == tabPageBoardSetup)
					{
						ShowTesterConnections("", "");
						SaveReportDataToExcelFile(dlg.FileName, excelReportBoards);
					}
					else if (tabControl1.SelectedTab == tabPageProbeSetup)
					{
						ShowTesterConnections("", "");
						SaveReportDataToExcelFile(dlg.FileName, excelReportConnections);
					}
					else if (tabControl1.SelectedTab == tabPageTestProcedure)
					{
						ShowTestSteps();
						SaveReportDataToExcelFile(dlg.FileName, excelReportTestSteps);
					}
				}
			}
		}

		private void exitToolStripMenuItem_Click(object sender, EventArgs e)
		{
			//if (currentFile 
		}

		ArrayList excelReportBoards = new ArrayList();
		ArrayList excelReportConnections = new ArrayList();
		ArrayList excelReportTestSteps = new ArrayList();
		

		private bool SaveReportDataToExcelFile(string file, ArrayList exportExcel)
		{
			Cursor.Current = Cursors.WaitCursor;
			int success = 0;
			Microsoft.Office.Interop.Excel.Application xlApp = null;
			Microsoft.Office.Interop.Excel.Workbook xlWorkBook = null;
			Microsoft.Office.Interop.Excel.Worksheet xlWorkSheet = null;
			try
			{
				xlApp = new Microsoft.Office.Interop.Excel.Application();
				if (xlApp != null)
				{
					xlWorkBook = xlApp.Workbooks.Add(Missing.Value);
					if (xlWorkBook != null)
					{
						xlApp.DisplayAlerts = false;
						try
						{
							xlWorkBook.SaveAs(file,
								Microsoft.Office.Interop.Excel.XlFileFormat.xlWorkbookNormal,
								Missing.Value, Missing.Value, Missing.Value, Missing.Value,
								Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlExclusive,
								Missing.Value, Missing.Value, Missing.Value, Missing.Value,
								Missing.Value);
							success = 1;
						}
						catch (Exception ex)
						{
							MessageBox.Show(ex.Message);
						}
						xlApp.DisplayAlerts = true;
					}
					if (xlWorkBook != null && success == 1)
					{
						xlWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);
						if (xlWorkSheet != null)
						{
							int excelCurrentRow = 0;
							foreach (string s in exportExcel)
							{
								string str = s;
								excelCurrentRow++;
								int col = 1;
								while (str.Length > 0)
								{
									string newText;
									int index = str.IndexOf('\t');
									if (index >= 0)
									{
										newText = str.Substring(0, index);
										str = str.Substring(index + 1);
									}
									else
									{
										newText = str;
										str = "";
									}
									xlWorkSheet.Cells[excelCurrentRow, col] = newText;
									col++;
								}
							}
							success = 2;
						}
						if (success == 2)
						{
							//xlWorkSheet.Range["A1:K4"].Rows.Font.Bold = true;
							//xlWorkSheet.Range["A4:K4"].Rows.Font.Underline = true;
							//xlWorkSheet.Range["A2"].HorizontalAlignment = HorizontalAlignment.Left;
							//xlWorkSheet.Rows.HorizontalAlignment = HorizontalAlignment.Left;
							xlWorkSheet.Columns.AutoFit();

							xlWorkBook.Save();
							xlWorkBook.Close(true, Missing.Value, Missing.Value);
							success = 3;
						}
					}
				}
				if (xlApp != null) xlApp.Quit();
			}
			finally
			{
				releaseObject(xlWorkSheet);
				releaseObject(xlWorkBook);
				releaseObject(xlApp);
			}
			Cursor.Current = Cursors.Default;
			if (success == 3)
			{
				viewExternalFile("", file);
				return true;
			}
			else return false;
		}

		private void releaseObject(object obj)
		{
			try
			{
				System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
				obj = null;
			}
			catch
			{
				obj = null;
			}
			finally
			{
				GC.Collect();
			}
		}

		private void viewExternalFile(string program, string file)
		{
			Cursor.Current = Cursors.WaitCursor;
			if (program.Length > 0)
			{
				try	// first attempt
				{
					Process newProcess = new Process();
					newProcess = System.Diagnostics.Process.Start(program, file);
					return;
				}
				catch (System.ComponentModel.Win32Exception ex)
				{
					if (ex.Message.StartsWith("The system cannot find the file specified") == true)
					{
						try	// second attempt
						{
							Process newProcess2 = new Process();
							newProcess2 = System.Diagnostics.Process.Start(file);
						}
						catch (Exception ex2)
						{
							MessageBox.Show(ex2.Message);
						}
					}
					else
					{
						MessageBox.Show(ex.Message);
					}
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message);
				}
			}
			else
			{
				try
				{
					Process newProcess = new Process();
					newProcess = System.Diagnostics.Process.Start(file);
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message);
				}
			}
			Cursor.Current = Cursors.Default;
		}

		private void Form1_FormClosing(object sender, FormClosingEventArgs e)
		{
			exitToolStripMenuItem_Click(sender, e);
		}

		string comboBoxTestTypeBackup = "";

		private void comboBoxTestType_DropDownClosed(object sender, EventArgs e)
		{
			int id = GetSelectedTest();
			if (id >= 1)
			{
				if (comboBoxTestTypeBackup != comboBoxTestType.Text)
				{
					comboBoxTestObject_DropDown(sender, e);
					comboBoxTestCommand_DropDown(sender, e);
				}
				PopulateCommandDetails("");
			}
			else
			{
				MessageBox.Show("Please first select the test step which you want to set.");
			}
		}

		private string GetBoardName(string moduleName, string positionIndex)
		{
			return "Board #" + positionIndex + "  ( " + moduleName + " )";
		}

		private void HideCommandDetails()
		{
			labelProbeState.Text = ""; labelProbeState.Visible = false;
			labelMinDelay.Text = ""; labelMinDelay.Visible = false;
			labelMaxDelay.Text = ""; labelMaxDelay.Visible = false;
			labelBoard.Text = ""; labelBoard.Visible = false;
			comboBoxBoard.Text = ""; comboBoxBoard.Visible = false;
			dataGridViewProbes.Rows.Clear(); dataGridViewProbes.Visible = false;
			textBoxMinDelay.Text = ""; textBoxMinDelay.Visible = false; labelSecondsMin.Visible = false;
			textBoxMaxDelay.Text = ""; textBoxMaxDelay.Visible = false; labelSecondsMax.Visible = false;
			textBoxTestName.Text = "";
			buttonHigh.Visible = false;
			buttonLow.Visible = false;
			buttonDontCare.Visible = false;
			buttonCircle.Visible = false;
			textBoxHexFile.Visible = false;

			textBoxTestName.Visible = false;
			labelNote.Visible = false;
			buttonUpdate.Visible = false;
		}

		private void PopulateCommandDetails(string preSetBoardName)
		{
			HideCommandDetails();

			if (testXmlDoc != null)
			{
				int id = GetSelectedTest();
				if (id >= 1)
				{
					XElement test = SearchElementById(stringStep, id);
					if (test != null)
					{
						string boardName = "";
						if (preSetBoardName.Length > 0)
						{
							boardName = preSetBoardName;
						}
						else
						{
							XElement b = test.Element("BoardId");
							if (b != null)
							{
								string b_id = b.Value;
								XElement module = SearchModuleByPosition(b_id);
								if (module != null)
								{
									string name = module.Element(stringModuleAlias).Value;
									boardName = GetBoardName(name, b_id);
								}
							}
						}
						string cmd = GetCurrentSelectedCommand();
						switch (cmd)
						{
							case stringCommand_VerifyOutputs:
								labelBoard.Text = "Monitor outputs with:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								labelProbeState.Text = "Verify that signals must be:"; labelProbeState.Visible = true; dataGridViewProbes.Visible = true;
								break;
							case stringCommand_SimulateInputs:
								labelBoard.Text = "Simulate inputs from:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								labelProbeState.Text = "Simulate signals:"; labelProbeState.Visible = true; dataGridViewProbes.Visible = true;
								break;
							case stringCommand_BarcodeScan:
								labelBoard.Text = "Read barcode from:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								labelProbeState.Text = "Trigger scanner:"; labelProbeState.Visible = true; dataGridViewProbes.Visible = true;
								break;
							case stringCommand_WaitOutputs:
								labelBoard.Text = "Monitor outputs with:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								labelProbeState.Text = "After change occurs, the signals must be:"; labelProbeState.Visible = true;  dataGridViewProbes.Visible = true;
								labelMinDelay.Text = "Change must not occur within"; labelMinDelay.Visible = true; textBoxMinDelay.Visible = true;
								labelSecondsMin.Text = "(Seconds)";	labelSecondsMin.Visible = true;
								labelMaxDelay.Text = "Change must occur within"; labelMaxDelay.Visible = true; textBoxMaxDelay.Visible = true;  labelSecondsMax.Visible = true;
								break;
							case stringCommand_Wait:
								labelMinDelay.Text = "Wait"; labelMinDelay.Visible = true; textBoxMinDelay.Visible = true;
								labelSecondsMin.Text = "(Seconds)";	labelSecondsMin.Visible = true;
								break;
							case stringCommand_RepeatStart:
								labelMinDelay.Text = "Repeat"; labelMinDelay.Visible = true; textBoxMinDelay.Visible = true;
								labelSecondsMin.Text = "(Times)";	labelSecondsMin.Visible = true;
								break;
							case stringCommand_WaitUser:
							case stringCommand_RepeatEnd:
								break;
							case stringCommand_EraseRenesas:
							case stringCommand_EraseCypress:
								labelBoard.Text = "Erase program with:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								break;
							//case stringCommand_Barcode:
							//	break;
							case stringCommand_FlashRenesas:
							case stringCommand_FlashMicrochip:
							case stringCommand_FlashCypress:
								labelBoard.Text = "Flash program with:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								labelProbeState.Text = "Target firmware file:"; labelProbeState.Visible = true;
								textBoxHexFile.Visible = true;
								break;
							case stringCommand_FlashInventek:
								labelBoard.Text = "Flash program with:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								labelProbeState.Text = "MAC log file:"; labelProbeState.Visible = true;
								textBoxHexFile.Visible = true;
								break;
							case stringCommand_ReadUart:
								labelBoard.Text = "Read Uart:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName; comboBoxBoard.Visible = true;
								labelProbeState.Text = "Message string:"; labelProbeState.Visible = true;
								textBoxHexFile.Visible = true;
								break;
							case stringCommand_SearchUart:
								labelBoard.Text = "Search Uart:"; labelBoard.Visible = true;
								comboBoxBoard.Text = boardName;	comboBoxBoard.Visible = true;
								labelProbeState.Text = "Message string:"; labelProbeState.Visible = true;
								textBoxHexFile.Visible = true;
								break;
							case stringCommand_WaitImage:
								labelProbeState.Text = "Image:"; labelProbeState.Visible = true;
								textBoxHexFile.Visible = true;
								/*labelMinDelay.Text = "Image ID:"; labelMinDelay.Visible = true; textBoxMinDelay.Visible = true;
								labelSecondsMin.Text = ""; labelSecondsMin.Visible = false;*/
								break;
							default:
								return;
						}
						textBoxTestName.Visible = true;
						labelNote.Visible = true;
						buttonUpdate.Visible = true;

						string ioDirection = GetCurrentSelectedCommandIoDirection();
						if (ioDirection == stringIoDirection_Input || ioDirection == stringIoDirection_Output)
						{
							foreach (XElement obj in testXmlDoc.Descendants(stringConnection))
							{
								string str = (string)obj.Element(stringConnectionAlias);
								string board = (string)obj.Element(stringBoardIndexOnTester);
								XElement module = SearchModuleByPosition(board);
								if (module == null)
								{
									continue;
								}
								string name = GetBoardName(module.Element(stringModuleAlias).Value, board);
								if (comboBoxBoard.Text != name)
								{
									continue;
								}
								string pinNumber = (string)obj.Element(stringPinNumberOnBoard);
								XElement pin = SearchPinById(board, pinNumber);
								if (pin != null)
								{
									string value = "";
									string direction = pin.Element(stringIoDirection).Value;
									if (direction != null && direction.Length > 0)
									{
										if (direction == ioDirection)
										{
											var info = from element in test.Descendants("Probe")
													   where ((string)element.Element("Name") == str)
													   select element;
											if (info != null && info.Count() > 0)
											{
												foreach (XElement element in info.Distinct())
												{
													value = element.Element("Value").Value;
													break;
												}
											}
											string specialFlameBoardAdditionalChannels = "";
											XElement specialFlameBoardElement = pin.Element(stringSpecialFlameBoardAdditionalChannels);
											if (specialFlameBoardElement != null) specialFlameBoardAdditionalChannels = specialFlameBoardElement.Value;
											string specialPowerBoardAdditionalChannels = "";
											XElement specialPowerBoardElement = pin.Element(stringSpecialPowerBoardAdditionalChannels);
											if (specialPowerBoardElement != null) specialPowerBoardAdditionalChannels = specialPowerBoardElement.Value;
											DataGridViewRow r = new DataGridViewRow();
											r.CreateCells(dataGridViewProbes);
											r.Cells[0].Value = str;
											r.Cells[1].Value = value + "                  ";
											r.Cells[2].Value = specialFlameBoardAdditionalChannels;
											r.Cells[3].Value = specialPowerBoardAdditionalChannels;
											r.Cells[4].Value = "";
											dataGridViewProbes.Rows.Add(r);
										}
									}
								}
							}
						}
						switch (cmd)
						{
							case stringCommand_WaitOutputs:
								XElement min = test.Element("MinValue");
								if (min != null) textBoxMinDelay.Text = min.Value;
								XElement max = test.Element("MaxValue");
								if (max != null) textBoxMaxDelay.Text = max.Value;
								break;
							case stringCommand_Wait:
								XElement wait = test.Element("Value");
								if (wait != null) textBoxMinDelay.Text = wait.Value;
								break;
							case stringCommand_RepeatStart:
								XElement repeat = test.Element("RepeatNumber");
								if (repeat != null) textBoxMinDelay.Text = repeat.Value;
								break;
							case stringCommand_WaitUser:
							case stringCommand_RepeatEnd:
								break;
							case stringCommand_EraseRenesas:
							case stringCommand_EraseCypress:
								break;
							//case stringCommand_Barcode:
							//	break;
							case stringCommand_FlashRenesas:
							case stringCommand_FlashMicrochip:
							case stringCommand_FlashCypress:
								XElement hexFile = test.Element("FirmwareFile");
								if (hexFile != null) textBoxHexFile.Text = hexFile.Value;
								break;
							case stringCommand_FlashInventek:
								XElement macFile = test.Element("MacLogFile");
								if (macFile != null) textBoxHexFile.Text = macFile.Value;
								break;
							case stringCommand_ReadUart:
							case stringCommand_SearchUart:
								XElement stringId = test.Element("MessageString");
								if (stringId != null) textBoxHexFile.Text = stringId.Value;
								break;
							case stringCommand_WaitImage:
								XElement image = test.Element("Image");
								if (image != null) textBoxMinDelay.Text = image.Value;
								break;
						}
						XElement note = test.Element(stringTestStepNote);
						if (note != null) textBoxTestName.Text = note.Value;
						DataGridShowButtons();
					}
				}
			}
		}

		private void comboBoxTestType_DropDown(object sender, EventArgs e)
		{
			comboBoxTestTypeBackup = comboBoxTestType.Text;
		}

		private void Form1_Load(object sender, EventArgs e)
		{
			newToolStripMenuItem_Click(sender, e);
		}

		private void comboBoxBoard_DropDownClosed(object sender, EventArgs e)
		{
			PopulateCommandDetails(comboBoxBoard.Text);
		}

		private int copiedStep = 0;

		private void buttonCopy_Click(object sender, EventArgs e)
		{
			int id = GetSelectedTest();
			if (id >= 1)
			{
				copiedStep = id;
			}
			else
			{
				copiedStep = 0;
			}
		}

		private void buttonPaste_Click(object sender, EventArgs e)
		{
			int id = GetSelectedTest();
			if (id >= 1 && copiedStep >= 1 && copiedStep != id)
			{
				XElement copied = SearchElementById(stringStep, copiedStep);
				XElement target = SearchElementById(stringStep, id);
				if (copied != null && target != null)
				{
					target.RemoveNodes();
					foreach (XElement ele in copied.Descendants())
					{
						XElement p = ele.Parent;
						if (p != null && p == copied)
						{
							target.Add(ele);
						}
					}
					LoadTestFile(id);
				}
			}
		}

		private DataGridViewRow GetSelectedRow()
		{
			if (dataGridViewProbes.Rows.Count >= 1)
			{
				int rows = dataGridViewProbes.SelectedCells.Count;
				if (rows == 1)
				{
					int row = dataGridViewProbes.SelectedCells[0].RowIndex;
					return dataGridViewProbes.Rows[row];
				}
			}
			return null;
		}

		private void dataGridViewProbes_SelectionChanged(object sender, EventArgs e)
		{
			buttonHigh.Visible = true;
			buttonLow.Visible = true;
			buttonDontCare.Visible = true;
		}

		private void buttonHigh_Click(object sender, EventArgs e)
		{
			DataGridViewRow r = GetSelectedRow();
			if (r != null) r.Cells[1].Value = "1";
		}

		private void buttonLow_Click(object sender, EventArgs e)
		{
			DataGridViewRow r = GetSelectedRow();
			if (r != null) r.Cells[1].Value = "0";
		}

		private void buttonDontCare_Click(object sender, EventArgs e)
		{
			DataGridViewRow r = GetSelectedRow();
			if (r != null) r.Cells[1].Value = "";
		}

		private void buttonCircle_Click(object sender, EventArgs e)
		{
			DataGridViewRow r = GetSelectedRow();
			if (r != null)
			{
				string str = ((string)(r.Cells[1].Value)).Trim();
				string str2 = ((string)(r.Cells[2].Value)).Trim();
				string str3 = ((string)(r.Cells[3].Value)).Trim();
				int current_data = 0;
				if (str.Length > 0) current_data = Convert.ToInt16(str);
				else current_data = 0;
				current_data++;
				int channel_num = 0;
				if (str2.Length > 0) channel_num = Convert.ToInt16(str2);
				else if (str3.Length > 0) channel_num = Convert.ToInt16(str3);
				if (channel_num == 0 || current_data > channel_num) current_data = 0;
				r.Cells[1].Value = current_data.ToString();
			}
		}

		private void DataGridShowButtons()
		{
			DataGridViewRow r = GetSelectedRow();
			if (r != null)
			{
				string str2 = ((string)(r.Cells[2].Value)).Trim();
				string str3 = ((string)(r.Cells[3].Value)).Trim();
				if (str2.Length > 0 || str3.Length > 0)
				{
					buttonCircle.Visible = true;
					buttonHigh.Visible = false;
					buttonLow.Visible = false;
					buttonDontCare.Visible = false;
				}
				else
				{
					buttonCircle.Visible = false;
					buttonHigh.Visible = true;
					buttonLow.Visible = true;
					buttonDontCare.Visible = true;
				}
			}
		}

		private void dataGridViewProbes_CellEnter(object sender, DataGridViewCellEventArgs e)
		{
			DataGridShowButtons();
		}

		private void dataGridViewProbes_Click(object sender, EventArgs e)
		{
			DataGridShowButtons();
		}

		private void boardSetupToolStripMenuItem_Click_1(object sender, EventArgs e)
		{
			tabControl1.SelectedTab = tabPageBoardSetup;
		}

		private void buttonInsertBoardBelow_Click(object sender, EventArgs e)
		{

		}

		private void buttonMoveBoardUp_Click(object sender, EventArgs e)
		{
			TreeNode node = treeViewBoards.SelectedNode;
			if (node != null)	// if a board is selected 
			{
				string currentBoardIndexOnTester = (string)node.Tag;
				if (currentBoardIndexOnTester != null && currentBoardIndexOnTester.Length > 0)	// a legitimate board to move
				{
					int currentPosition = Convert.ToInt32(currentBoardIndexOnTester);
					if (currentPosition > 0)	// allow to move up
					{
						string newBoardIndexOnTester = Convert.ToString(currentPosition - 1);
						XElement currentBoard = SearchBoardByPosition(currentBoardIndexOnTester);
						XElement exchangeBoard = SearchBoardByPosition(newBoardIndexOnTester);
						if (currentBoard != null && exchangeBoard != null)	// current board and exchange board found
						{
							// change position
							currentBoard.Element(stringBoardIndexOnTester).Value = newBoardIndexOnTester;
							exchangeBoard.Element(stringBoardIndexOnTester).Value = currentBoardIndexOnTester;
							// change all references to these two boards' position
							MessageBox.Show("Need to evaluate effect of board moving up.");
							// update display
							ShowTesterConnections("", "");
							MessageBox.Show("Need to evaluate effect of test step display.");
							return;
						}
					}
				}
			}
			MessageBox.Show("Please select the board which you want to move up.");
		}

		private void buttonMoveBoardDown_Click(object sender, EventArgs e)
		{

		}
		/*
					TreeNode parent = node.Parent;
					if (parent != null)
					{
						string currentBoardIndexOnTester = (string)parent.Tag;
						string pinNumberOnBoard = (string)node.Tag;
						XElement obj = SearchForProbeElement("", currentBoardIndexOnTester, pinNumberOnBoard);
						if (obj == null)
						{
							XElement pin = SearchPinById(currentBoardIndexOnTester, pinNumberOnBoard);
							if (pin != null)
							{
								string ioDirection = (string)pin.Element(stringIoDirection).Value;
								if (ioDirection == "-")
								{
									MessageBox.Show("This is a reference pin without a specific function.");
									return;
								}
							}
							DialogResult result = dlg.ShowDialog();
							switch (result)
							{
								case System.Windows.Forms.DialogResult.OK:
									string newName = dlg.textBoxInput.Text.Trim();
									if (newName.Length > 0)
									{
										// check if replacedByNewAlias is currently used, proceed if only not
										if (SearchForProbeElement(newName, "", "") == null)
										{
											AddProbe(newName, currentBoardIndexOnTester, pinNumberOnBoard);
											ShowTesterConnections(currentBoardIndexOnTester, pinNumberOnBoard);
										}
										else
										{
											MessageBox.Show("Probe name \"" + newName + "\" is already used.");
										}
									}
									break;
							}
						}
					}
*/

	}
}
